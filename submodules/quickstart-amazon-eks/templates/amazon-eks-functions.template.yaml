AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Lambda functions required for the AWS EKS Quick Start (qs-1p7nknoh4)
Parameters:
  LambdaZipsBucketName:
    Description: Bucket Name where the lambda zip files should be placed
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: 'Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).'
    Default: aws-quickstart
    Description: 'S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  CopyZipsRoleArn:
    Type: String
  EKSProvisionRoleArn:
    Type: String
  VPCID:
    Type: AWS::EC2::VPC::Id
  EKSSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  DeleteLambdaZipsBucketContents:
    Type: String
    AllowedValues: [ "True", "False" ]
    Default: "False"
  DeleteBucketContentsRoleArn:
    Type: String
    Default: ""
  QuickStartStackMakerRoleArn:
    Type: String
  ControlPlaneSecurityGroup:
    Type: String
  KubeConfigUploadRoleArn:
    Type: String
  CleanupLoadBalancersRoleArn:
    Type: String
  CleanupSecurityGroupDependenciesRoleArn:
    Type: String
  GetCallerArnRoleArn:
    Type: String
Conditions:
  CreateDeleteBucketContentsLambda: !Equals
    - !Ref 'DeleteLambdaZipsBucketContents'
    - "True"
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref LambdaZipsBucketName
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
      - functions/packages/Helm/lambda.zip
      - functions/packages/DeleteBucketContents/lambda.zip
      - functions/packages/CfnStackAssumeRole/lambda.zip
      - functions/packages/KubeManifest/lambda.zip
      - functions/packages/KubeGet/lambda.zip
      - functions/packages/KubeConfigUpload/lambda.zip
      - functions/packages/CleanupLoadBalancers/lambda.zip
      - functions/packages/CleanupSecurityGroupDependencies/lambda.zip
      - functions/packages/kubectlLayer/lambda.zip
      - functions/packages/helmLayer/lambda.zip
      - functions/packages/crhelperLayer/lambda.zip
      - functions/packages/GetCallerArn/lambda.zip
  KubectlLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/kubectlLayer/lambda.zip'
  HelmLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/helmLayer/lambda.zip'
  CrhelperLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/crhelperLayer/lambda.zip'
  CleanupLoadBalancersLambda:
    DependsOn: CopyZips
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref CleanupLoadBalancersRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupLoadBalancers/lambda.zip'
  CleanupSecurityGroupDependenciesLambda:
    DependsOn: CopyZips
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref CleanupSecurityGroupDependenciesRoleArn
      Layers: [!Ref CrhelperLayer]
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupSecurityGroupDependencies/lambda.zip'
  LambdaSGCleanup:
    Type: Custom::LambdaSGCleanup
    Properties:
      ServiceToken: !GetAtt CleanupSecurityGroupDependenciesLambda.Arn
      Region: !Ref "AWS::Region"
      SecurityGroups:
        - !Ref EKSLambdaSecurityGroup
  EKSLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for lambda to communicate with cluster API
      VpcId: !Ref VPCID
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow lambda to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref EKSLambdaSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  QuickStartStackMakerLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref QuickStartStackMakerRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CfnStackAssumeRole/lambda.zip'
  HelmLambda:
    DependsOn: [ CopyZips, LambdaSGCleanup ]
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !Ref EKSProvisionRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref HelmLayer, !Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/Helm/lambda.zip'
  KubeManifestLambda:
    DependsOn: [ CopyZips, LambdaSGCleanup ]
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !Ref EKSProvisionRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KubeManifest/lambda.zip'
  KubeGetLambda:
    DependsOn: [ CopyZips, LambdaSGCleanup ]
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !Ref EKSProvisionRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KubeGet/lambda.zip'
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Condition: CreateDeleteBucketContentsLambda
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref DeleteBucketContentsRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  GetCallerArnLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref GetCallerArnRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GetCallerArn/lambda.zip'
  KubeConfigUploadLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref KubeConfigUploadRoleArn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrhelperLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KubeConfigUpload/lambda.zip'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !Ref CopyZipsRoleArn
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          logger = logging.getLogger(__name__)
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {'Bucket': source_bucket, 'Key': key}
                  logging.info(f'copy_source: {copy_source}\ndest_bucket: {dest_bucket}\nkey: {key}')
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def handler(event, context):
              logger.debug(event)
              status = cfnresponse.SUCCESS
              try:
                  if event['RequestType'] == 'Delete':
                      delete_objects(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['Prefix'],
                                     event['ResourceProperties']['Objects'])
                  else:
                      copy_objects(event['ResourceProperties']['SourceBucket'], event['ResourceProperties']['DestBucket'],
                                   event['ResourceProperties']['Prefix'], event['ResourceProperties']['Objects'])
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, None)
Outputs:
  HelmLambdaArn:
    Value: !GetAtt HelmLambda.Arn
  QuickStartStackMakerLambdaArn:
    Value: !GetAtt QuickStartStackMakerLambda.Arn
  DeleteBucketContentsLambdaArn:
    Value: !If [ CreateDeleteBucketContentsLambda, !GetAtt DeleteBucketContentsLambda.Arn, "" ]
  KubeManifestLambdaArn:
    Value: !GetAtt KubeManifestLambda.Arn
  KubeGetLambdaArn:
    Value: !GetAtt KubeGetLambda.Arn
  KubeConfigUploadLambdaArn:
    Value: !GetAtt KubeConfigUploadLambda.Arn
  CleanupLoadBalancersLambdaArn:
    Value: !GetAtt CleanupLoadBalancersLambda.Arn
  CleanupSecurityGroupDependenciesLambdaArn:
    Value: !GetAtt CleanupSecurityGroupDependenciesLambda.Arn
  GetCallerArnLambdaArn:
    Value: !GetAtt GetCallerArnLambda.Arn
